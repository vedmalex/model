{"version":3,"sources":["model/field.js"],"names":["discoverFieldType","obj","validate","valid","Field","props","children","relation","undefined","validation","Error","toString","result","$obj","type_","type","identity_","identity","required_","required","indexed_","indexed","idKey","entity","name","relation_","res","JSON","parse","stringify","toObject","toJSON","value"],"mappings":"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","file":"model/field.js","sourcesContent":["import {FieldBase} from './fieldbase';\nimport {validator} from '../validator';\nimport {Entity} from './entity';\nimport {HasOne} from './hasone';\nimport {HasMany} from './hasmany';\nimport {BelongsTo} from './belongsto';\nimport {BelongsToMany} from './belongstomany';\nimport {Ref} from './ref';\n\nimport {\n  FieldSchema,\n  HasOneSchema,\n  HasManySchema,\n  BelongsToSchema,\n  BelongsToManySchema,\n} from '../schema';\n\nfunction discoverFieldType(obj) {\n  if (validator.validate(obj, HasOneSchema).valid) {\n    return 'HasOne';\n  } else if (validator.validate(obj, HasManySchema).valid) {\n    return 'HasMany';\n  } else if (validator.validate(obj, BelongsToSchema).valid) {\n    return 'BelongsTo';\n  } else if (validator.validate(obj, BelongsToManySchema).valid) {\n    return 'BelongsToMany';\n  }\n};\n\nexport class Field extends FieldBase {\n\n  static compose(props, children) {\n    return {\n      ...props,\n      relation: children ? children[0] : undefined,\n    };\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  get type() {\n    return this.$obj ? this.$obj.type : undefined;\n  }\n\n  get identity() {\n    return this.$obj ? this.$obj.identity : undefined;\n  }\n\n  set identity(value) {\n    if (value) {\n      this.$obj.idKey = new Ref(this.$obj.entity, this.$obj.name);\n    } else {\n      this.$obj.idKey = undefined;\n    }\n    this.$obj.identity = this.$obj.identity_ = value;\n  }\n\n  get required() {\n    return this.$obj ? this.$obj.required : undefined;\n  }\n\n  get idKey() {\n    return this.$obj ? this.$obj.idKey : undefined;\n  }\n\n  get relation() {\n    return this.$obj ? this.$obj.relation : undefined;\n  }\n\n  validateSchema(obj) {\n    const validation = validator.validate(obj, FieldSchema);\n    if (!validation.valid) {\n      throw new Error(validation.toString());\n    }\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n      const result = this.$obj ? {...this.$obj} : {};\n\n      let type_ = obj.type;\n      let type = type_ || 'string';\n\n      let identity_ = obj.identity;\n      let identity = identity_ || false;\n\n      let required_ = obj.required;\n      let required = required || false;\n\n      let indexed_ = obj.indexed;\n      let indexed = indexed || identity;\n\n      result.type_ = type_;\n      result.type = type;\n\n      result.identity_ = identity_;\n      result.identity = identity;\n\n      result.indexed_ = indexed_;\n      result.indexed = indexed;\n\n      if (result.identity) {\n        // это то как выглядит ключ для внешних ссылок\n        result.idKey = new Ref(result.entity, result.name);\n      }\n\n      result.required_ = required_;\n      result.required = identity_ || required_ || false;\n\n      if (obj.relation) {\n        let relation_ = obj.relation;\n        let relation;\n\n        switch (discoverFieldType(relation_)){\n          case 'HasOne':\n            relation = new HasOne({...relation_, entity: obj.entity});\n          break;\n          case 'HasMany':\n            relation = new HasMany({...relation_, entity: obj.entity });\n          break;\n          case 'BelongsTo':\n            relation = new BelongsTo({...relation_, entity: obj.entity});\n          break;\n          case 'BelongsToMany':\n            relation = new BelongsToMany({...relation_, entity: obj.entity});\n          break;\n        }\n\n        result.relation = relation;\n        delete result.type_;\n        delete result.type;\n      }\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  // it get fixed object\n  toObject() {\n    let props = this.$obj;\n    let res = super.toObject();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      type: props.type || props.type_,\n      identity: props.identity || props.identity_ ,\n      required: props.required || props.required_,\n      indexed: props.indexed || props.indexed_,\n      idKey: props.idKey ? props.idKey.toString() : undefined,\n      relation: props.relation ? props.relation.toObject() : undefined,\n    }));\n  }\n\n  // it get clean object with no default values\n  toJSON() {\n    let props = this.$obj;\n    let res = super.toJSON();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      type: props.type_,\n      identity: props.identity_,\n      required: props.required_,\n      indexed: props.indexed_,\n      relation: props.relation ? props.relation.toJSON() : undefined,\n    }));\n  }\n}\n"],"sourceRoot":"/source/"}