{"version":3,"sources":["model/belongstomany.js"],"names":["BelongsToMany","props","children","result","ref","belongsToMany","obj","$obj","belongsToMany_","using_","using","res","match","entity","field","trim","name","toLowerCase","name_","JSON","parse","stringify","toString","undefined"],"mappings":"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","file":"model/belongstomany.js","sourcesContent":["import {RefBase} from './refbase';\nimport {REF_PATTERN} from './definitions';\nimport {Ref} from './ref';\nimport camelcase from 'camelcase';\n\nexport class BelongsToMany extends RefBase {\n\n  static compose(props, children) {\n    let result = {\n      ...props,\n    };\n    if (result.ref && !result.belongsToMany) {\n      result.belongsToMany = result.ref;\n      delete result.ref;\n    }\n    return result;\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  get belongsToMany() {\n    return this.$obj ? this.$obj.belongsToMany : undefined;\n  }\n\n  get using() {\n    return this.$obj ? this.$obj.using : undefined;\n  }\n\n  get ref() {\n    return this.$obj ? this.$obj.belongsToMany : undefined;\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n\n      const result = this.$obj ? {...this.$obj} : {};\n\n      let belongsToMany_ = obj.belongsToMany;\n\n      let using_ = obj.using;\n\n      let belongsToMany;\n      if (belongsToMany_) {\n        belongsToMany = new Ref();\n        let res = belongsToMany_.match(REF_PATTERN);\n        belongsToMany.entity = res[1] || obj.entity;\n        belongsToMany.field = res[2] ? camelcase(res[2].trim()) : '';\n      }\n\n      let using;\n      if (using_) {\n        using = new Ref();\n        let res = using_.match(REF_PATTERN);\n        using.entity = res[1] || obj.name || obj.entity;\n        using.field = res[2] ? camelcase(res[2].trim()) : obj.entity.toLowerCase();\n      } else {\n        using = new Ref(`${obj.name || obj.entity}#${obj.entity.toLowerCase()}`);\n      }\n\n      if (!obj.name_ && using) {\n        result.name = using.entity;\n      }\n\n      result.belongsToMany_ = belongsToMany_;\n      result.belongsToMany = belongsToMany;\n\n      result.using_ = using_;\n      result.using = using;\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n  // it get fixed object\n  toObject() {\n    let props = this.$obj;\n    let res = super.toObject();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      belongsToMany: props.belongsToMany ? props.belongsToMany.toString() : undefined,\n      using: props.using ? props.using.toString() : undefined,\n    }));\n  }\n\n  // it get clean object with no default values\n  toJSON() {\n    var props = this.$obj;\n    let res = super.toJSON();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      belongsToMany: props.belongsToMany_,\n      using: props.using_,\n    }));\n  }\n}\n"],"sourceRoot":"/source/"}