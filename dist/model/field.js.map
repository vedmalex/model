{"version":3,"sources":["model/field.js"],"names":["discoverFieldType","obj","hasOne","hasMany","belongsTo","belongsToMany","console","warn","JSON","stringify","Field","props","children","relation","undefined","$obj","idKey","entity","name","indexed","identity","identity_","result","type_","type","required_","required","indexed_","relation_","res","parse","toString","toObject","toJSON"],"mappings":"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","file":"model/field.js","sourcesContent":["import {FieldBase} from './fieldbase';\nimport {Entity} from './entity';\nimport {HasOne} from './hasone';\nimport {HasMany} from './hasmany';\nimport {BelongsTo} from './belongsto';\nimport {BelongsToMany} from './belongstomany';\nimport {Ref} from './ref';\n\nfunction discoverFieldType(obj) {\n  // сделать проверку по полю...\n  if (obj.hasOne) {\n    return 'HasOne';\n  } else if (obj.hasMany) {\n    return 'HasMany';\n  } else if (obj.belongsTo) {\n    return 'BelongsTo';\n  } else if (obj.belongsToMany) {\n    return 'BelongsToMany';\n  } else {\n    console.warn(`undefined relation type of ${JSON.stringify(obj)}`);\n    return 'undefined';\n  }\n};\n\nexport class Field extends FieldBase {\n\n  static compose(props, children) {\n    return {\n      ...props,\n      relation: children ? children[0] : undefined,\n    };\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  get type() {\n    return this.$obj ? this.$obj.type : undefined;\n  }\n\n  get identity() {\n    return this.$obj ? this.$obj.identity : undefined;\n  }\n\n  // this is to make sure that if we internally set\n  makeIdentity() {\n    this.$obj.idKey = new Ref(this.$obj.entity, this.$obj.name);\n    this.$obj.indexed = this.$obj.identity = this.$obj.identity_ = true;\n  }\n\n  get required() {\n    return this.$obj ? (this.$obj.required || this.$obj.required_) : undefined;\n  }\n\n  get indexed() {\n    return this.$obj ? (this.$obj.indexed || this.$obj.indexed_) : undefined;\n  }\n\n  get idKey() {\n    return this.$obj ? this.$obj.idKey : undefined;\n  }\n\n  get relation() {\n    return this.$obj ? this.$obj.relation : undefined;\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n      const result = this.$obj ? {...this.$obj} : {};\n\n      let type_ = obj.type;\n      let type = type_ || 'string';\n\n      let identity_ = obj.identity;\n      let identity = identity_ || false;\n\n      let required_ = obj.required;\n      let required = required || false;\n\n      let indexed_ = obj.indexed;\n      let indexed = indexed || identity;\n\n      result.type_ = type_;\n      result.type = type;\n\n      result.identity_ = identity_;\n      result.identity = identity;\n\n      result.indexed_ = indexed_;\n      result.indexed = indexed;\n\n      if (result.identity) {\n        // это то как выглядит ключ для внешних ссылок\n        result.idKey = new Ref(result.entity, result.name);\n      }\n\n      result.required_ = required_;\n      result.required = identity_ || required_ || false;\n\n      if (obj.relation) {\n        let relation_ = obj.relation;\n        let relation;\n\n        switch (discoverFieldType(relation_)){\n          case 'HasOne':\n            relation = new HasOne({...relation_, entity: obj.entity});\n          break;\n          case 'HasMany':\n            relation = new HasMany({...relation_, entity: obj.entity });\n          break;\n          case 'BelongsTo':\n            relation = new BelongsTo({...relation_, entity: obj.entity});\n          break;\n          case 'BelongsToMany':\n            relation = new BelongsToMany({...relation_, entity: obj.entity});\n          break;\n          case 'unknown':\n            relation = undefined;\n        }\n\n        result.relation = relation;\n        delete result.type_;\n        delete result.type;\n      }\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  // it get fixed object\n  toObject() {\n    let props = this.$obj;\n    let res = super.toObject();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      type: props.type || props.type_,\n      identity: props.identity || props.identity_ ,\n      required: props.required || props.required_,\n      indexed: props.indexed || props.indexed_,\n      idKey: props.idKey ? props.idKey.toString() : undefined,\n      relation: props.relation ? props.relation.toObject() : undefined,\n    }));\n  }\n\n  // it get clean object with no default values\n  toJSON() {\n    let props = this.$obj;\n    let res = super.toJSON();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      type: props.type_,\n      identity: props.identity_,\n      required: props.required_,\n      indexed: props.indexed_,\n      relation: props.relation ? props.relation.toJSON() : undefined,\n    }));\n  }\n}\n"],"sourceRoot":"/source/"}