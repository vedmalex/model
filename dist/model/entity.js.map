{"version":3,"sources":["model/entity.js"],"names":[],"mappings":"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","file":"model/entity.js","sourcesContent":["import {ModelBase} from './modelbase';\nimport {Field} from './field';\nimport {HasOne} from './hasone';\nimport {HasMany} from './hasmany';\nimport {BelongsTo} from './belongsto';\nimport {BelongsToMany} from './belongstomany';\nimport {validator} from '../validator';\nimport {DEFAULT_ID_FIELD} from './definitions';\n\nimport {\n  FieldSchema,\n  EntitySchema,\n} from '../schema';\n\nexport class Entity extends ModelBase {\n\n  static compose(props, children) {\n    if (props) {\n      return new Entity({\n      ...props,\n      fields: children,\n    });\n    } else {\n      return new Entity();\n    }\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  ensureIds(modelPackage) {\n    this.identity.forEach((value)=> {\n      var ids = this.fields.get(value);\n      modelPackage.identityFields.set(ids.idKey.toString(), this);\n    });\n  }\n\n  ensureFKs(modelPackage) {\n    if (modelPackage) {\n      let modelRelations;\n      if (modelPackage.relations.has(this.name)) {\n        modelRelations = modelPackage.relations.get(this.name);\n      } else {\n        modelRelations = new Map();\n        modelPackage.relations.set(this.name, modelRelations);\n      }\n\n      this.relations.forEach((value)=> {\n        let ref = this.fields.get(value);\n        // must be different to apply fixup\n        modelRelations.set(ref.name, ref.clone());\n      });\n\n      let missing = this.checkRelations(modelPackage);\n      missing.forEach((r)=> {\n        modelRelations.delete(r.name);\n      });\n    }\n  }\n\n  checkRelations(modelPackage) {\n    let missing = [];\n    if (modelPackage.relations.has(this.name)) {\n      let modelRelations = modelPackage.relations.get(this.name);\n      modelRelations.forEach((field)=> {\n        let r = field.relation;\n        let missingRef = true;\n        if (!r.ref.field) {\n          // discover fieldName\n          if (modelPackage.entities.has(r.ref.entity)) {\n            let e = modelPackage.entities.get(r.ref.entity);\n            r.ref.field = e.identity[0];\n            missingRef = false;\n          }\n        }\n\n        const fType = (r instanceof HasOne) ? 'HasOne' : (r instanceof HasMany ? 'HasMany' : (r instanceof BelongsToMany ? 'BelongsToMany' : 'BelongsTo'));\n        switch (fType){\n          case 'HasOne':\n            if (modelPackage.entities.has(r.ref.entity)) {\n              let refe = modelPackage.entities.get(r.ref.entity);\n              if (relations.fields.has(r.ref.field)) {\n                missingRef = false;\n              }\n            }\n          break;\n          case 'HasMany':\n            // must be in ref store\n            if (modelPackage.entities.has(r.ref.entity)) {\n              let refe = modelPackage.entities.get(r.ref.entity);\n              if (refe.fields.has(r.ref.field)) {\n                missingRef = false;\n              }\n            }\n          break;\n          case 'BelongsToMany':\n            // must be in ref store\n            if (modelPackage.entities.has(r.ref.entity)) {\n              let refe = modelPackage.entities.get(r.ref.entity);\n              if (refe.fields.has(r.ref.field)) {\n                missingRef = false;\n              }\n            } else {\n              let using = r.using;\n              if (using && modelPackage.entities.has(using.entity)) {\n                // здесь нужно будет изменить тип ассоциации\n\n                let replaceRef = r.toJSON();\n                replaceRef.hasMany = replaceRef.using;\n\n                delete replaceRef.belongsToMany;\n                delete replaceRef.using;\n\n                field.$obj.relation = new HasMany(replaceRef);\n                missingRef = false;\n              }\n            }\n          break;\n          case 'BelongsTo':\n            // must be in identity store\n            if (modelPackage.identityFields.has(r.ref.toString())) {\n              missingRef = false;\n            }\n          break;\n        }\n\n        if (missingRef) {\n          missing.push(field);\n        }\n      });\n    }\n    return missing;\n  }\n\n  removeIds(modelPackage) {\n    this.identity.forEach((value)=> {\n      var ids = this.fields.get(value);\n      modelPackage.identityFields.delete(ids.idKey.toString());\n    });\n  }\n\n  get relations() {\n    return this.$obj ? this.$obj.relations : undefined;\n  }\n\n  get required() {\n    return this.$obj ? this.$obj.required : undefined;\n  }\n\n  get identity() {\n    return this.$obj ? this.$obj.identity : undefined;\n  }\n\n  get fields() {\n    return this.$obj ? this.$obj.fields : undefined;\n  }\n\n  validateSchema(obj) {\n    const validation = validator.validate(obj, EntitySchema);\n    if (!validation.valid) {\n      throw new Error(validation.toString());\n    }\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n\n      const result = this.$obj ? {...this.$obj} : {};\n\n      result.name = (result.name.slice(0,1)).toUpperCase() + result.name.slice(1);\n\n      const fields = new Map();\n      const relations = new Set();\n      const identity = new Set();\n      const required = new Set();\n\n      obj.fields.forEach(f => {\n\n        let field = new Field({...f, entity: result.name});\n\n        if (fields.has(field.name)) {\n          throw new Error(`the same field ${field.name} is already exists in ${obj.name} entry`);\n        }\n\n        fields.set(field.name, field);\n\n        if (field.identity) {\n          identity.add(field.name);\n        }\n\n        if (field.required) {\n          required.add(field.name);\n        }\n\n        if (field.relation) {\n          relations.add(field.name);\n        }\n\n      });\n\n      if (identity.size == 0) {\n        let f;\n        if (fields.has('id')) {\n          f = fields.get('id');\n        } else if (fields.has('_id')) {\n          f = fields.get('_id');\n        } else {\n          f = new Field({...DEFAULT_ID_FIELD, entity: result.name});\n          fields.set(f.name, f);\n        }\n\n        f.identity = true;\n        identity.add(f.name);\n        required.add(f.name);\n      }\n\n      result.relations = relations;\n      result.identity = identity;\n      result.required = required;\n      result.fields = fields;\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  toObject(modelPackage) {\n    if (!modelPackage) {\n      let props = this.$obj;\n      let res = super.toObject();\n      return JSON.parse(JSON.stringify({\n      ...res,\n      fields: [...props.fields.values()].map(f=> f.toObject()),\n    }));\n    } else {\n      let modelRelations = modelPackage.relations.get(this.name);\n      if (modelRelations) {\n        let props = this.$obj;\n        let res = super.toObject();\n        return JSON.parse(JSON.stringify({\n          ...res,\n          fields: [...props.fields.values()].map(f=> {\n            if (this.relations.has(f.name)) {\n              if (modelRelations.has(f.name)) {\n                return f.toObject(modelPackage);\n              }\n            } else {\n              return f.toObject(modelPackage);\n            }\n          }).filter(f=>f),\n        }));\n      }\n    }\n  }\n\n  toJSON(modelPackage) {\n    if (!modelPackage) {\n      let props = this.$obj;\n      let res = super.toJSON();\n      return JSON.parse(JSON.stringify({\n      ...res,\n      fields: [...props.fields.values()].map(f=> f.toJSON()),\n    }));\n    } else {\n      let modelRelations = modelPackage.relations.get(this.name);\n      if (modelRelations) {\n        let props = this.$obj;\n        let res = super.toJSON();\n        return JSON.parse(JSON.stringify({\n          ...res,\n          fields: [...props.fields.values()].map(f=> {\n            if (this.relations.has(f.name)) {\n              if (modelRelations.has(f.name)) {\n                return f.toJSON(modelPackage);\n              }\n            } else {\n              return f.toJSON(modelPackage);\n            }\n          }).filter(f=>f),\n        }));\n      }\n    }\n  }\n}\n"],"sourceRoot":"/source/"}