{"version":3,"sources":["model/hasone.js"],"names":["HasOne","props","children","result","ref","hasOne","obj","$obj","hasOne_","res","match","entity","field","trim","JSON","parse","stringify","toString","undefined"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;IAEaA,M,WAAAA,M;;;;;4BAEIC,K,EAAOC,Q,EAAU;AAC9B,UAAIC,sBACCF,KADD,CAAJ;AAGA,UAAIE,OAAOC,GAAP,IAAc,CAACD,OAAOE,MAA1B,EAAkC;AAChCF,eAAOE,MAAP,GAAgBF,OAAOC,GAAvB;AACA,eAAOD,OAAOC,GAAd;AACD;AACD,aAAOD,MAAP;AACD;;;AAED,kBAAYG,GAAZ,EAAiB;AAAA;;AAAA,2GACTA,GADS;AAEhB;;;;+BAUUA,G,EAAK;AACd,UAAIA,GAAJ,EAAS;AACP,mHAAiBA,GAAjB;;AAEA,YAAMH,SAAS,KAAKI,IAAL,gBAAgB,KAAKA,IAArB,IAA6B,EAA5C;;AAEA,YAAIC,UAAUF,IAAID,MAAlB;;AAEA,YAAIA,eAAJ;AACA,YAAIG,OAAJ,EAAa;AACXH,mBAAS,cAAT;AACA,cAAII,MAAMD,QAAQE,KAAR,0BAAV;AACAL,iBAAOM,MAAP,GAAgBF,IAAI,CAAJ,KAAUH,IAAIK,MAA9B;AACAN,iBAAOO,KAAP,GAAeH,IAAI,CAAJ,IAAS,yBAAUA,IAAI,CAAJ,EAAOI,IAAP,EAAV,CAAT,GAAoC,EAAnD;AACD;;AAEDV,eAAOK,OAAP,GAAiBA,OAAjB;AACAL,eAAOE,MAAP,GAAgBA,MAAhB;;AAEA,aAAKE,IAAL,gBACKJ,MADL;AAGD;AACF;;AAED;;;;+BACW;AACT,UAAIF,QAAQ,KAAKM,IAAjB;AACA,UAAIE,8GAAJ;AACA,aAAOK,KAAKC,KAAL,CAAWD,KAAKE,SAAL,cACbP,GADa;AAEhBJ,gBAAQJ,MAAMI,MAAN,GAAeJ,MAAMI,MAAN,CAAaY,QAAb,EAAf,GAAyCC;AAFjC,SAAX,CAAP;AAID;;AAED;;;;6BACS;AACP,UAAIjB,QAAQ,KAAKM,IAAjB;AACA,UAAIE,4GAAJ;AACA,aAAOK,KAAKC,KAAL,CAAWD,KAAKE,SAAL,cACbP,GADa;AAEhBJ,gBAAQJ,MAAMO;AAFE,SAAX,CAAP;AAID;;;wBAnDY;AACX,aAAO,KAAKD,IAAL,GAAY,KAAKA,IAAL,CAAUF,MAAtB,GAA+Ba,SAAtC;AACD;;;wBAES;AACR,aAAO,KAAKX,IAAL,GAAY,KAAKA,IAAL,CAAUF,MAAtB,GAA+Ba,SAAtC;AACD","file":"model/hasone.js","sourcesContent":["import {RefBase} from './refbase';\nimport {REF_PATTERN} from './definitions';\nimport {Ref} from './ref';\nimport camelcase from 'camelcase';\n\nexport class HasOne extends RefBase {\n\n  static compose(props, children) {\n    let result = {\n      ...props,\n    };\n    if (result.ref && !result.hasOne) {\n      result.hasOne = result.ref;\n      delete result.ref;\n    }\n    return result;\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  get hasOne() {\n    return this.$obj ? this.$obj.hasOne : undefined;\n  }\n\n  get ref() {\n    return this.$obj ? this.$obj.hasOne : undefined;\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n\n      const result = this.$obj ? {...this.$obj} : {};\n\n      let hasOne_ = obj.hasOne;\n\n      let hasOne;\n      if (hasOne_) {\n        hasOne = new Ref();\n        let res = hasOne_.match(REF_PATTERN);\n        hasOne.entity = res[1] || obj.entity;\n        hasOne.field = res[2] ? camelcase(res[2].trim()) : '';\n      }\n\n      result.hasOne_ = hasOne_;\n      result.hasOne = hasOne;\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  // it get fixed object\n  toObject() {\n    let props = this.$obj;\n    let res = super.toObject();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      hasOne: props.hasOne ? props.hasOne.toString() : undefined,\n    }));\n  }\n\n  // it get clean object with no default values\n  toJSON() {\n    let props = this.$obj;\n    let res = super.toJSON();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      hasOne: props.hasOne_,\n    }));\n  }\n}\n"],"sourceRoot":"/source/"}