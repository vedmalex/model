{"version":3,"sources":["model/hasmany.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOa;;;;;4BAEI,OAAO,UAAU;AAC9B,UAAI,sBACC,MADD,CAD0B;AAI9B,UAAI,OAAO,GAAP,IAAc,CAAC,OAAO,OAAP,EAAgB;AACjC,eAAO,OAAP,GAAiB,OAAO,GAAP,CADgB;AAEjC,eAAO,OAAO,GAAP,CAF0B;OAAnC;AAIA,aAAO,MAAP,CAR8B;;;;AAWhC,WAbW,OAaX,CAAY,GAAZ,EAAiB;0BAbN,SAaM;;kEAbN,oBAcH,MADS;GAAjB;;eAbW;;mCAyBI,KAAK;AAClB,UAAM,aAAa,qBAAU,QAAV,CAAmB,GAAnB,wBAAb,CADY;AAElB,UAAI,CAAC,WAAW,KAAX,EAAkB;AACrB,cAAM,IAAI,KAAJ,CAAU,WAAW,QAAX,EAAV,CAAN,CADqB;OAAvB;;;;+BAKS,KAAK;AACd,UAAI,GAAJ,EAAS;AACP,mCAlCO,mDAkCU,IAAjB,CADO;;AAGP,YAAM,SAAS,KAAK,IAAL,gBAAgB,KAAK,IAAL,CAAhB,GAA6B,EAA7B,CAHR;;AAKP,YAAI,WAAW,IAAI,OAAJ,CALR;;AAOP,YAAI,mBAAJ,CAPO;AAQP,YAAI,QAAJ,EAAc;AACZ,oBAAU,cAAV,CADY;AAEZ,cAAI,MAAM,SAAS,KAAT,0BAAN,CAFQ;AAGZ,kBAAQ,MAAR,GAAiB,IAAI,CAAJ,KAAU,IAAI,MAAJ,CAHf;AAIZ,kBAAQ,KAAR,GAAgB,IAAI,CAAJ,IAAS,yBAAU,IAAI,CAAJ,EAAO,IAAP,EAAV,CAAT,GAAoC,EAApC,CAJJ;SAAd;;AAOA,eAAO,QAAP,GAAkB,QAAlB,CAfO;AAgBP,eAAO,OAAP,GAAiB,OAAjB,CAhBO;;AAkBP,aAAK,IAAL,gBACK,OADL,CAlBO;OAAT;;;;;;+BAwBS;AACT,UAAI,QAAQ,KAAK,IAAL,CADH;AAET,UAAI,iCA3DK,gDA2DL,CAFK;AAGT,aAAO,KAAK,KAAL,CAAW,KAAK,SAAL,cACb;AACH,iBAAS,MAAM,OAAN,GAAgB,MAAM,OAAN,CAAc,QAAd,EAAhB,GAA2C,SAA3C;QAFO,CAAX,CAAP,CAHS;;;;;;;6BAUF;AACP,UAAI,QAAQ,KAAK,IAAL,CADL;AAEP,UAAI,iCArEK,8CAqEL,CAFG;AAGP,aAAO,KAAK,KAAL,CAAW,KAAK,SAAL,cACb;AACH,iBAAS,MAAM,QAAN;QAFO,CAAX,CAAP,CAHO;;;;wBAlDK;AACZ,aAAO,KAAK,IAAL,GAAY,KAAK,IAAL,CAAU,OAAV,GAAoB,SAAhC,CADK;;;;wBAIJ;AACR,aAAO,KAAK,IAAL,GAAY,KAAK,IAAL,CAAU,OAAV,GAAoB,SAAhC,CADC;;;;SArBC","file":"model/hasmany.js","sourcesContent":["import {RefBase} from './refbase';\nimport {HasManySchema} from '../schema';\nimport {validator} from '../validator';\nimport {REF_PATTERN} from './definitions';\nimport {Ref} from './ref';\nimport camelcase from 'camelcase';\n\nexport class HasMany extends RefBase {\n\n  static compose(props, children) {\n    let result = {\n      ...props,\n    };\n    if (result.ref && !result.hasMany) {\n      result.hasMany = result.ref;\n      delete result.ref;\n    }\n    return result;\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  get hasMany() {\n    return this.$obj ? this.$obj.hasMany : undefined;\n  }\n\n  get ref() {\n    return this.$obj ? this.$obj.hasMany : undefined;\n  }\n\n  validateSchema(obj) {\n    const validation = validator.validate(obj, HasManySchema);\n    if (!validation.valid) {\n      throw new Error(validation.toString());\n    }\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n\n      const result = this.$obj ? {...this.$obj} : {};\n\n      let hasMany_ = obj.hasMany;\n\n      let hasMany;\n      if (hasMany_) {\n        hasMany = new Ref();\n        let res = hasMany_.match(REF_PATTERN);\n        hasMany.entity = res[1] || obj.entity;\n        hasMany.field = res[2] ? camelcase(res[2].trim()) : '';\n      }\n\n      result.hasMany_ = hasMany_;\n      result.hasMany = hasMany;\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n  // it get fixed object\n  toObject() {\n    let props = this.$obj;\n    let res = super.toObject();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      hasMany: props.hasMany ? props.hasMany.toString() : undefined,\n    }));\n  }\n\n  // it get clean object with no default values\n  toJSON() {\n    var props = this.$obj;\n    let res = super.toJSON();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      hasMany: props.hasMany_,\n    }));\n  }\n}\n"],"sourceRoot":"/source/"}