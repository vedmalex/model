{"version":3,"sources":["model/modelpackage.js"],"names":["ModelPackage","props","entityList","result","forEach","entity","add","entities","Map","identityFields","relations","set","name","ensureIds","get","json","delete","removeIds","e","ensureFKs","size"],"mappings":";;;;;;;;;AAAA;;;;IAEaA,Y,WAAAA,Y;;;4BAEIC,K,EAAOC,U,EAAY;AAChC,UAAIC,SAAS,IAAIH,YAAJ,CAAiBC,KAAjB,CAAb;AACAC,iBAAWE,OAAX,CAAmB,UAACC,MAAD,EAAW;AAC5BF,eAAOG,GAAP,CAAWD,MAAX;AACD,OAFD;AAGA,aAAOF,MAAP;AACD;;;AAED,0BAAc;AAAA;;AACZ;AACA,SAAKI,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACA;AACA,SAAKC,cAAL,GAAsB,IAAID,GAAJ,EAAtB;AACA;AACA,SAAKE,SAAL,GAAiB,IAAIF,GAAJ,EAAjB;AACD;;;;wBAEGH,M,EAAQ;AACV,UAAIA,gCAAJ,EAA8B;AAC5B,aAAKE,QAAL,CAAcI,GAAd,CAAkBN,OAAOO,IAAzB,EAA+BP,MAA/B;AACAA,eAAOQ,SAAP,CAAiB,IAAjB;AACD;AACD,aAAOR,MAAP;AACD;;;wBAEGO,I,EAAM;AACR,aAAO,KAAKL,QAAL,CAAcO,GAAd,CAAkBF,IAAlB,CAAP;AACD;;;2BAEMG,I,EAAM;AACX,aAAO,KAAKT,GAAL,CAAS,mBAAWS,IAAX,CAAT,CAAP;AACD;;;2BAEMH,I,EAAM;AACX,UAAIP,SAAS,KAAKE,QAAL,CAAcO,GAAd,CAAkBF,IAAlB,CAAb;AACA,UAAIP,MAAJ,EAAY;AACV,aAAKE,QAAL,CAAcS,MAAd,CAAqBJ,IAArB;AACAP,eAAOY,SAAP,CAAiB,IAAjB;AACD;AACF;;;gCAIW;AAAA;;AACV,WAAKV,QAAL,CAAcH,OAAd,CAAsB,UAACc,CAAD,EAAM;AAC1BA,UAAEC,SAAF;AACD,OAFD;AAGD;;;wBAPU;AACT,aAAO,KAAKZ,QAAL,CAAca,IAArB;AACD","file":"model/modelpackage.js","sourcesContent":["import { Entity } from '../model/entity';\n\nexport class ModelPackage {\n\n  static compose(props, entityList) {\n    let result = new ModelPackage(props);\n    entityList.forEach((entity)=> {\n      result.add(entity);\n    });\n    return result;\n  }\n\n  constructor() {\n    // список всех entity\n    this.entities = new Map();\n    // существующие в пакете identity\n    this.identityFields = new Map();\n    // ref для исправлений\n    this.relations = new Map();\n  }\n\n  add(entity) {\n    if (entity instanceof Entity) {\n      this.entities.set(entity.name, entity);\n      entity.ensureIds(this);\n    }\n    return entity;\n  }\n\n  get(name) {\n    return this.entities.get(name);\n  }\n\n  create(json) {\n    return this.add(new Entity(json));\n  }\n\n  remove(name) {\n    let entity = this.entities.get(name);\n    if (entity) {\n      this.entities.delete(name);\n      entity.removeIds(this);\n    }\n  }\n  get size() {\n    return this.entities.size;\n  }\n  ensureAll() {\n    this.entities.forEach((e)=> {\n      e.ensureFKs(this);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}