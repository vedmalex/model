{"version":3,"sources":["model/compose.js"],"names":[],"mappings":";;;;;QAQgB;;;;;;;;;;;;;;;;AAAT,SAAS,OAAT,CAAiB,EAAjB,EAAqB,KAArB,EAAqC;AAC1C,MAAI,aAAJ,CAD0C;AAE1C,MAAI,YAAY,OAAO,EAAP,EAAW;AACzB,YAAQ,GAAG,WAAH,EAAR;AACE,WAAK,QAAL;AACE,2BADF;AAEA,cAFA;AADF,WAIO,OAAL;AACE,yBADF;AAEA,cAFA;AAJF,WAOO,QAAL;AACE,2BADF;AAEA,cAFA;AAPF,WAUO,SAAL;AACE,6BADF;AAEA,cAFA;AAVF,WAaO,WAAL;AACE,iCADF;AAEA,cAFA;AAbF,WAgBO,eAAL;AACE,yCADF;AAEA,cAFA;AAhBF,WAmBO,OAAL,CAnBF;AAoBE,WAAK,cAAL;AACE,uCADF;AAEA,cAFA;AApBF,KADyB;GAA3B,MAyBO;AACL,QAAI,EAAJ,CADK;GAzBP;;oCAFoC;;GAAM;;AA8B1C,SAAO,EAAE,OAAF,CAAU,KAAV,EAAiB,IAAjB,CAAP,CA9B0C;CAArC","file":"model/compose.js","sourcesContent":["import {Entity} from './entity';\nimport {Field} from './field';\nimport {ModelPackage} from './modelpackage';\nimport {HasOne} from './hasone';\nimport {HasMany} from './hasmany';\nimport {BelongsTo} from './belongsto';\nimport {BelongsToMany} from './belongstomany';\n\nexport function compose(T_, props, ...attr) {\n  let T;\n  if ('string' == typeof T_) {\n    switch (T_.toLowerCase()){\n      case 'entity':\n        T = Entity;\n      break;\n      case 'field':\n        T = Field;\n      break;\n      case 'hasone':\n        T = HasOne;\n      break;\n      case 'hasmany':\n        T = HasMany;\n      break;\n      case 'belongsto':\n        T = BelongsTo;\n      break;\n      case 'belongstomany':\n        T = BelongsToMany;\n      break;\n      case 'model':\n      case 'modelPackage':\n        T = ModelPackage;\n      break;\n    }\n  } else {\n    T = T_;\n  }\n  return T.compose(props, attr);\n};\n"],"sourceRoot":"/source/"}