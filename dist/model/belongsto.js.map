{"version":3,"sources":["model/belongsto.js"],"names":["BelongsTo","props","children","result","ref","belongsTo","obj","validation","validate","valid","Error","toString","$obj","belongsTo_","res","match","entity","field","trim","JSON","parse","stringify","undefined"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;IAEaA,S,WAAAA,S;;;;;4BAEIC,K,EAAOC,Q,EAAU;AAC9B,UAAIC,sBACCF,KADD,CAAJ;AAGA,UAAIE,OAAOC,GAAP,IAAc,CAACD,OAAOE,SAA1B,EAAqC;AACnCF,eAAOE,SAAP,GAAmBF,OAAOC,GAA1B;AACA,eAAOD,OAAOC,GAAd;AACD;AACD,aAAOD,MAAP;AACD;;;AAED,qBAAYG,GAAZ,EAAiB;AAAA;;AAAA,iHACTA,GADS;AAEhB;;;;mCAUcA,G,EAAK;AAClB,UAAMC,aAAa,qBAAUC,QAAV,CAAmBF,GAAnB,0BAAnB;AACA,UAAI,CAACC,WAAWE,KAAhB,EAAuB;AACrB,cAAM,IAAIC,KAAJ,CAAUH,WAAWI,QAAX,EAAV,CAAN;AACD;AACF;;;+BAEUL,G,EAAK;AACd,UAAIA,GAAJ,EAAS;AACP,yHAAiBA,GAAjB;;AAEA,YAAMH,SAAS,KAAKS,IAAL,gBAAgB,KAAKA,IAArB,IAA6B,EAA5C;;AAEA,YAAIC,aAAaP,IAAID,SAArB;;AAEA,YAAIA,kBAAJ;AACA,YAAIQ,UAAJ,EAAgB;AACdR,sBAAY,cAAZ;AACA,cAAIS,MAAMD,WAAWE,KAAX,0BAAV;AACAV,oBAAUW,MAAV,GAAmBF,IAAI,CAAJ,KAAUR,IAAIU,MAAjC;AACAX,oBAAUY,KAAV,GAAkBH,IAAI,CAAJ,IAAS,yBAAUA,IAAI,CAAJ,EAAOI,IAAP,EAAV,CAAT,GAAoC,EAAtD;AACD;;AAEDf,eAAOU,UAAP,GAAoBA,UAApB;AACAV,eAAOE,SAAP,GAAmBA,SAAnB;;AAEA,aAAKO,IAAL,gBACKT,MADL;AAGD;AACF;;AAED;;;;+BACW;AACT,UAAIF,QAAQ,KAAKW,IAAjB;AACA,UAAIE,oHAAJ;AACA,aAAOK,KAAKC,KAAL,CAAWD,KAAKE,SAAL,cACbP,GADa;AAEhBT,mBAAWJ,MAAMI,SAAN,GAAkBJ,MAAMI,SAAN,CAAgBM,QAAhB,EAAlB,GAA+CW;AAF1C,SAAX,CAAP;AAID;;AAED;;;;6BACS;AACP,UAAIrB,QAAQ,KAAKW,IAAjB;AACA,UAAIE,kHAAJ;AACA,aAAOK,KAAKC,KAAL,CAAWD,KAAKE,SAAL,cACbP,GADa;AAEhBT,mBAAWJ,MAAMY;AAFD,SAAX,CAAP;AAID;;;wBA1De;AACd,aAAO,KAAKD,IAAL,GAAY,KAAKA,IAAL,CAAUP,SAAtB,GAAkCiB,SAAzC;AACD;;;wBAES;AACR,aAAO,KAAKV,IAAL,GAAY,KAAKA,IAAL,CAAUP,SAAtB,GAAkCiB,SAAzC;AACD","file":"model/belongsto.js","sourcesContent":["import {RefBase} from './refbase';\nimport {BelongsToSchema} from '../schema';\nimport {validator} from '../validator';\nimport {REF_PATTERN} from './definitions';\nimport {Ref} from './ref';\nimport camelcase from 'camelcase';\n\nexport class BelongsTo extends RefBase {\n\n  static compose(props, children) {\n    let result = {\n      ...props,\n    };\n    if (result.ref && !result.belongsTo) {\n      result.belongsTo = result.ref;\n      delete result.ref;\n    }\n    return result;\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  get belongsTo() {\n    return this.$obj ? this.$obj.belongsTo : undefined;\n  }\n\n  get ref() {\n    return this.$obj ? this.$obj.belongsTo : undefined;\n  }\n\n  validateSchema(obj) {\n    const validation = validator.validate(obj, BelongsToSchema);\n    if (!validation.valid) {\n      throw new Error(validation.toString());\n    }\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n\n      const result = this.$obj ? {...this.$obj} : {};\n\n      let belongsTo_ = obj.belongsTo;\n\n      let belongsTo;\n      if (belongsTo_) {\n        belongsTo = new Ref();\n        let res = belongsTo_.match(REF_PATTERN);\n        belongsTo.entity = res[1] || obj.entity;\n        belongsTo.field = res[2] ? camelcase(res[2].trim()) : '';\n      }\n\n      result.belongsTo_ = belongsTo_;\n      result.belongsTo = belongsTo;\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  // it get fixed object\n  toObject() {\n    let props = this.$obj;\n    let res = super.toObject();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      belongsTo: props.belongsTo ? props.belongsTo.toString() : undefined,\n    }));\n  }\n\n  // it get clean object with no default values\n  toJSON() {\n    let props = this.$obj;\n    let res = super.toJSON();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      belongsTo: props.belongsTo_,\n    }));\n  }\n}\n"],"sourceRoot":"/source/"}