{"version":3,"sources":["model/hasmany.js"],"names":["HasMany","props","children","result","ref","hasMany","obj","validation","validate","valid","Error","toString","$obj","hasMany_","res","match","entity","field","trim","JSON","parse","stringify","undefined"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;IAEaA,O,WAAAA,O;;;;;4BAEIC,K,EAAOC,Q,EAAU;AAC9B,UAAIC,sBACCF,KADD,CAAJ;AAGA,UAAIE,OAAOC,GAAP,IAAc,CAACD,OAAOE,OAA1B,EAAmC;AACjCF,eAAOE,OAAP,GAAiBF,OAAOC,GAAxB;AACA,eAAOD,OAAOC,GAAd;AACD;AACD,aAAOD,MAAP;AACD;;;AAED,mBAAYG,GAAZ,EAAiB;AAAA;;AAAA,6GACTA,GADS;AAEhB;;;;mCAUcA,G,EAAK;AAClB,UAAMC,aAAa,qBAAUC,QAAV,CAAmBF,GAAnB,wBAAnB;AACA,UAAI,CAACC,WAAWE,KAAhB,EAAuB;AACrB,cAAM,IAAIC,KAAJ,CAAUH,WAAWI,QAAX,EAAV,CAAN;AACD;AACF;;;+BAEUL,G,EAAK;AACd,UAAIA,GAAJ,EAAS;AACP,qHAAiBA,GAAjB;;AAEA,YAAMH,SAAS,KAAKS,IAAL,gBAAgB,KAAKA,IAArB,IAA6B,EAA5C;;AAEA,YAAIC,WAAWP,IAAID,OAAnB;;AAEA,YAAIA,gBAAJ;AACA,YAAIQ,QAAJ,EAAc;AACZR,oBAAU,cAAV;AACA,cAAIS,MAAMD,SAASE,KAAT,0BAAV;AACAV,kBAAQW,MAAR,GAAiBF,IAAI,CAAJ,KAAUR,IAAIU,MAA/B;AACAX,kBAAQY,KAAR,GAAgBH,IAAI,CAAJ,IAAS,yBAAUA,IAAI,CAAJ,EAAOI,IAAP,EAAV,CAAT,GAAoC,EAApD;AACD;;AAEDf,eAAOU,QAAP,GAAkBA,QAAlB;AACAV,eAAOE,OAAP,GAAiBA,OAAjB;;AAEA,aAAKO,IAAL,gBACKT,MADL;AAGD;AACF;AACD;;;;+BACW;AACT,UAAIF,QAAQ,KAAKW,IAAjB;AACA,UAAIE,gHAAJ;AACA,aAAOK,KAAKC,KAAL,CAAWD,KAAKE,SAAL,cACbP,GADa;AAEhBT,iBAASJ,MAAMI,OAAN,GAAgBJ,MAAMI,OAAN,CAAcM,QAAd,EAAhB,GAA2CW;AAFpC,SAAX,CAAP;AAID;;AAED;;;;6BACS;AACP,UAAIrB,QAAQ,KAAKW,IAAjB;AACA,UAAIE,8GAAJ;AACA,aAAOK,KAAKC,KAAL,CAAWD,KAAKE,SAAL,cACbP,GADa;AAEhBT,iBAASJ,MAAMY;AAFC,SAAX,CAAP;AAID;;;wBAzDa;AACZ,aAAO,KAAKD,IAAL,GAAY,KAAKA,IAAL,CAAUP,OAAtB,GAAgCiB,SAAvC;AACD;;;wBAES;AACR,aAAO,KAAKV,IAAL,GAAY,KAAKA,IAAL,CAAUP,OAAtB,GAAgCiB,SAAvC;AACD","file":"model/hasmany.js","sourcesContent":["import {RefBase} from './refbase';\nimport {HasManySchema} from '../schema';\nimport {validator} from '../validator';\nimport {REF_PATTERN} from './definitions';\nimport {Ref} from './ref';\nimport camelcase from 'camelcase';\n\nexport class HasMany extends RefBase {\n\n  static compose(props, children) {\n    let result = {\n      ...props,\n    };\n    if (result.ref && !result.hasMany) {\n      result.hasMany = result.ref;\n      delete result.ref;\n    }\n    return result;\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  get hasMany() {\n    return this.$obj ? this.$obj.hasMany : undefined;\n  }\n\n  get ref() {\n    return this.$obj ? this.$obj.hasMany : undefined;\n  }\n\n  validateSchema(obj) {\n    const validation = validator.validate(obj, HasManySchema);\n    if (!validation.valid) {\n      throw new Error(validation.toString());\n    }\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n\n      const result = this.$obj ? {...this.$obj} : {};\n\n      let hasMany_ = obj.hasMany;\n\n      let hasMany;\n      if (hasMany_) {\n        hasMany = new Ref();\n        let res = hasMany_.match(REF_PATTERN);\n        hasMany.entity = res[1] || obj.entity;\n        hasMany.field = res[2] ? camelcase(res[2].trim()) : '';\n      }\n\n      result.hasMany_ = hasMany_;\n      result.hasMany = hasMany;\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n  // it get fixed object\n  toObject() {\n    let props = this.$obj;\n    let res = super.toObject();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      hasMany: props.hasMany ? props.hasMany.toString() : undefined,\n    }));\n  }\n\n  // it get clean object with no default values\n  toJSON() {\n    var props = this.$obj;\n    let res = super.toJSON();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      hasMany: props.hasMany_,\n    }));\n  }\n}\n"],"sourceRoot":"/source/"}