{"version":3,"sources":["model/field.js"],"names":["discoverFieldType","obj","hasOne","hasMany","belongsTo","belongsToMany","console","warn","JSON","stringify","Field","props","children","relation","undefined","result","$obj","type_","type","identity_","identity","required_","required","indexed_","indexed","idKey","entity","name","relation_","res","parse","toString","toObject","toJSON","value"],"mappings":"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","file":"model/field.js","sourcesContent":["import {FieldBase} from './fieldbase';\nimport {Entity} from './entity';\nimport {HasOne} from './hasone';\nimport {HasMany} from './hasmany';\nimport {BelongsTo} from './belongsto';\nimport {BelongsToMany} from './belongstomany';\nimport {Ref} from './ref';\n\nfunction discoverFieldType(obj) {\n  // сделать проверку по полю...\n  if (obj.hasOne) {\n    return 'HasOne';\n  } else if (obj.hasMany) {\n    return 'HasMany';\n  } else if (obj.belongsTo) {\n    return 'BelongsTo';\n  } else if (obj.belongsToMany) {\n    return 'BelongsToMany';\n  } else {\n    console.warn(`undefined relation type of ${JSON.stringify(obj)}`);\n    return 'undefined';\n  }\n};\n\nexport class Field extends FieldBase {\n\n  static compose(props, children) {\n    return {\n      ...props,\n      relation: children ? children[0] : undefined,\n    };\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  get type() {\n    return this.$obj ? this.$obj.type : undefined;\n  }\n\n  get identity() {\n    return this.$obj ? this.$obj.identity : undefined;\n  }\n\n  set identity(value) {\n    if (value) {\n      this.$obj.idKey = new Ref(this.$obj.entity, this.$obj.name);\n    } else {\n      this.$obj.idKey = undefined;\n    }\n    this.$obj.identity = this.$obj.identity_ = value;\n  }\n\n  get required() {\n    return this.$obj ? this.$obj.required : undefined;\n  }\n\n  get indexed() {\n    return this.$obj ? this.$obj.indexed : undefined;\n  }\n\n  get idKey() {\n    return this.$obj ? this.$obj.idKey : undefined;\n  }\n\n  get relation() {\n    return this.$obj ? this.$obj.relation : undefined;\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n      const result = this.$obj ? {...this.$obj} : {};\n\n      let type_ = obj.type;\n      let type = type_ || 'string';\n\n      let identity_ = obj.identity;\n      let identity = identity_ || false;\n\n      let required_ = obj.required;\n      let required = required || false;\n\n      let indexed_ = obj.indexed;\n      let indexed = indexed || identity;\n\n      result.type_ = type_;\n      result.type = type;\n\n      result.identity_ = identity_;\n      result.identity = identity;\n\n      result.indexed_ = indexed_;\n      result.indexed = indexed;\n\n      if (result.identity) {\n        // это то как выглядит ключ для внешних ссылок\n        result.idKey = new Ref(result.entity, result.name);\n      }\n\n      result.required_ = required_;\n      result.required = identity_ || required_ || false;\n\n      if (obj.relation) {\n        let relation_ = obj.relation;\n        let relation;\n\n        switch (discoverFieldType(relation_)){\n          case 'HasOne':\n            relation = new HasOne({...relation_, entity: obj.entity});\n          break;\n          case 'HasMany':\n            relation = new HasMany({...relation_, entity: obj.entity });\n          break;\n          case 'BelongsTo':\n            relation = new BelongsTo({...relation_, entity: obj.entity});\n          break;\n          case 'BelongsToMany':\n            relation = new BelongsToMany({...relation_, entity: obj.entity});\n          break;\n          case 'unknown':\n            relation = undefined;\n        }\n\n        result.relation = relation;\n        delete result.type_;\n        delete result.type;\n      }\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  // it get fixed object\n  toObject() {\n    let props = this.$obj;\n    let res = super.toObject();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      type: props.type || props.type_,\n      identity: props.identity || props.identity_ ,\n      required: props.required || props.required_,\n      indexed: props.indexed || props.indexed_,\n      idKey: props.idKey ? props.idKey.toString() : undefined,\n      relation: props.relation ? props.relation.toObject() : undefined,\n    }));\n  }\n\n  // it get clean object with no default values\n  toJSON() {\n    let props = this.$obj;\n    let res = super.toJSON();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      type: props.type_,\n      identity: props.identity_,\n      required: props.required_,\n      indexed: props.indexed_,\n      relation: props.relation ? props.relation.toJSON() : undefined,\n    }));\n  }\n}\n"],"sourceRoot":"/source/"}