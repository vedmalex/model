{"version":3,"sources":["model/entity.js"],"names":["Entity","props","children","fields","obj","modelPackage","identity","forEach","value","ids","get","identityFields","set","idKey","toString","modelRelations","relations","has","name","Map","ref","clone","missing","checkRelations","r","delete","field","relation","missingRef","entities","entity","e","fType","refe","using","replaceRef","toJSON","hasMany","belongsToMany","$obj","push","validation","validate","valid","Error","result","slice","toUpperCase","Set","required","f","add","size","res","JSON","parse","stringify","values","map","toObject","filter","undefined"],"mappings":"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","file":"model/entity.js","sourcesContent":["import {ModelBase} from './modelbase';\nimport {Field} from './field';\nimport {HasOne} from './hasone';\nimport {HasMany} from './hasmany';\nimport {BelongsTo} from './belongsto';\nimport {BelongsToMany} from './belongstomany';\nimport {validator} from '../validator';\nimport {DEFAULT_ID_FIELD} from './definitions';\n\nimport {\n  FieldSchema,\n  EntitySchema,\n} from '../schema';\n\nexport class Entity extends ModelBase {\n\n  static compose(props, children) {\n    if (props) {\n      return new Entity({\n      ...props,\n      fields: children,\n    });\n    } else {\n      return new Entity();\n    }\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  ensureIds(modelPackage) {\n    this.identity.forEach((value)=> {\n      var ids = this.fields.get(value);\n      modelPackage.identityFields.set(ids.idKey.toString(), this);\n    });\n  }\n\n  ensureFKs(modelPackage) {\n    if (modelPackage) {\n      let modelRelations;\n      if (modelPackage.relations.has(this.name)) {\n        modelRelations = modelPackage.relations.get(this.name);\n      } else {\n        modelRelations = new Map();\n        modelPackage.relations.set(this.name, modelRelations);\n      }\n\n      this.relations.forEach((value)=> {\n        let ref = this.fields.get(value);\n        // must be different to apply fixup\n        modelRelations.set(ref.name, ref.clone());\n      });\n\n      let missing = this.checkRelations(modelPackage);\n      missing.forEach((r)=> {\n        modelRelations.delete(r.name);\n      });\n    }\n  }\n\n  checkRelations(modelPackage) {\n    let missing = [];\n    if (modelPackage.relations.has(this.name)) {\n      let modelRelations = modelPackage.relations.get(this.name);\n      modelRelations.forEach((field)=> {\n        let r = field.relation;\n        let missingRef = true;\n        if (!r.ref.field) {\n          // discover fieldName\n          if (modelPackage.entities.has(r.ref.entity)) {\n            let e = modelPackage.entities.get(r.ref.entity);\n            r.ref.field = e.identity[0];\n            missingRef = false;\n          }\n        }\n\n        const fType = (r instanceof HasOne) ? 'HasOne' : (r instanceof HasMany ? 'HasMany' : (r instanceof BelongsToMany ? 'BelongsToMany' : 'BelongsTo'));\n        switch (fType){\n          case 'HasOne':\n            if (modelPackage.entities.has(r.ref.entity)) {\n              let refe = modelPackage.entities.get(r.ref.entity);\n              if (relations.fields.has(r.ref.field)) {\n                missingRef = false;\n              }\n            }\n          break;\n          case 'HasMany':\n            // must be in ref store\n            if (modelPackage.entities.has(r.ref.entity)) {\n              let refe = modelPackage.entities.get(r.ref.entity);\n              if (refe.fields.has(r.ref.field)) {\n                missingRef = false;\n              }\n            }\n          break;\n          case 'BelongsToMany':\n            // must be in ref store\n            if (modelPackage.entities.has(r.ref.entity)) {\n              let refe = modelPackage.entities.get(r.ref.entity);\n              if (refe.fields.has(r.ref.field)) {\n                missingRef = false;\n              }\n            } else {\n              let using = r.using;\n              if (using && modelPackage.entities.has(using.entity)) {\n                // здесь нужно будет изменить тип ассоциации\n\n                let replaceRef = r.toJSON();\n                replaceRef.hasMany = replaceRef.using;\n\n                delete replaceRef.belongsToMany;\n                delete replaceRef.using;\n\n                field.$obj.relation = new HasMany(replaceRef);\n                missingRef = false;\n              }\n            }\n          break;\n          case 'BelongsTo':\n            // must be in identity store\n            if (modelPackage.identityFields.has(r.ref.toString())) {\n              missingRef = false;\n            }\n          break;\n        }\n\n        if (missingRef) {\n          missing.push(field);\n        }\n      });\n    }\n    return missing;\n  }\n\n  removeIds(modelPackage) {\n    this.identity.forEach((value)=> {\n      var ids = this.fields.get(value);\n      modelPackage.identityFields.delete(ids.idKey.toString());\n    });\n  }\n\n  get relations() {\n    return this.$obj ? this.$obj.relations : undefined;\n  }\n\n  get required() {\n    return this.$obj ? this.$obj.required : undefined;\n  }\n\n  get identity() {\n    return this.$obj ? this.$obj.identity : undefined;\n  }\n\n  get fields() {\n    return this.$obj ? this.$obj.fields : undefined;\n  }\n\n  validateSchema(obj) {\n    const validation = validator.validate(obj, EntitySchema);\n    if (!validation.valid) {\n      throw new Error(validation.toString());\n    }\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n\n      const result = this.$obj ? {...this.$obj} : {};\n\n      result.name = (result.name.slice(0,1)).toUpperCase() + result.name.slice(1);\n\n      const fields = new Map();\n      const relations = new Set();\n      const identity = new Set();\n      const required = new Set();\n\n      obj.fields.forEach(f => {\n\n        let field = new Field({...f, entity: result.name});\n\n        if (fields.has(field.name)) {\n          throw new Error(`the same field ${field.name} is already exists in ${obj.name} entry`);\n        }\n\n        fields.set(field.name, field);\n\n        if (field.identity) {\n          identity.add(field.name);\n        }\n\n        if (field.required) {\n          required.add(field.name);\n        }\n\n        if (field.relation) {\n          relations.add(field.name);\n        }\n\n      });\n\n      if (identity.size == 0) {\n        let f;\n        if (fields.has('id')) {\n          f = fields.get('id');\n        } else if (fields.has('_id')) {\n          f = fields.get('_id');\n        } else {\n          f = new Field({...DEFAULT_ID_FIELD, entity: result.name});\n          fields.set(f.name, f);\n        }\n\n        f.identity = true;\n        identity.add(f.name);\n        required.add(f.name);\n      }\n\n      result.relations = relations;\n      result.identity = identity;\n      result.required = required;\n      result.fields = fields;\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  toObject(modelPackage) {\n    if (!modelPackage) {\n      let props = this.$obj;\n      let res = super.toObject();\n      return JSON.parse(JSON.stringify({\n      ...res,\n      fields: [...props.fields.values()].map(f=> f.toObject()),\n    }));\n    } else {\n      let modelRelations = modelPackage.relations.get(this.name);\n      if (modelRelations) {\n        let props = this.$obj;\n        let res = super.toObject();\n        return JSON.parse(JSON.stringify({\n          ...res,\n          fields: [...props.fields.values()].map(f=> {\n            if (this.relations.has(f.name)) {\n              if (modelRelations.has(f.name)) {\n                return f.toObject(modelPackage);\n              }\n            } else {\n              return f.toObject(modelPackage);\n            }\n          }).filter(f=>f),\n        }));\n      }\n    }\n  }\n\n  toJSON(modelPackage) {\n    if (!modelPackage) {\n      let props = this.$obj;\n      let res = super.toJSON();\n      return JSON.parse(JSON.stringify({\n      ...res,\n      fields: [...props.fields.values()].map(f=> f.toJSON()),\n    }));\n    } else {\n      let modelRelations = modelPackage.relations.get(this.name);\n      if (modelRelations) {\n        let props = this.$obj;\n        let res = super.toJSON();\n        return JSON.parse(JSON.stringify({\n          ...res,\n          fields: [...props.fields.values()].map(f=> {\n            if (this.relations.has(f.name)) {\n              if (modelRelations.has(f.name)) {\n                return f.toJSON(modelPackage);\n              }\n            } else {\n              return f.toJSON(modelPackage);\n            }\n          }).filter(f=>f),\n        }));\n      }\n    }\n  }\n}\n"],"sourceRoot":"/source/"}