{"version":3,"sources":["model/modelbase.js"],"names":["ModelBase","obj","updateWith","JSON","stringify","toObject","props","$obj","name","name_","title","title_","description","description_","validation","validate","valid","Error","toString","result","validateSchema","trim","slice","toUpperCase","constructor","toJSON","undefined"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;;;;;IAEaA,S,WAAAA,S;AACX,qBAAYC,GAAZ,EAAiB;AAAA;;AACf,QAAIA,GAAJ,EAAS;AACP,WAAKC,UAAL,CAAgBD,GAAhB;AACD;AACF;;;;+BAgBU;AACT,aAAOE,KAAKC,SAAL,CAAe,KAAKC,QAAL,EAAf,CAAP;AACD;;;+BAEU;AACT,UAAIC,QAAQ,KAAKC,IAAjB;AACA,aAAO;AACLC,cAAMF,MAAME,IAAN,IAAcF,MAAMG,KADrB;AAELC,eAAOJ,MAAMI,KAAN,IAAeJ,MAAMK,MAFvB;AAGLC,qBAAaN,MAAMM,WAAN,IAAqBN,MAAMO;AAHnC,OAAP;AAKD;;;6BAEQ;AACP,UAAIP,QAAQ,KAAKC,IAAjB;AACA,aAAO;AACLC,cAAMF,MAAMG,KADP;AAELC,eAAOJ,MAAMK,MAFR;AAGLC,qBAAaN,MAAMO;AAHd,OAAP;AAKD;;;mCAEcZ,G,EAAK;AAClB,UAAMa,aAAa,qBAAUC,QAAV,CAAmBd,GAAnB,0BAAnB;AACA,UAAI,CAACa,WAAWE,KAAhB,EAAuB;AACrB,cAAM,IAAIC,KAAJ,CAAUH,WAAWI,QAAX,EAAV,CAAN;AACD;AACF;;;+BAEUjB,G,EAAK;AACd,UAAIA,GAAJ,EAAS;;AAEP,YAAMkB,SAAS,KAAKZ,IAAL,gBAAgB,KAAKA,IAArB,IAA6B,EAA5C;;AAEA,aAAKa,cAAL,CAAoBnB,GAApB;;AAEA,YAAIQ,QAAQR,IAAIO,IAAhB;AACA,YAAIG,SAASV,IAAIS,KAAjB;AACA,YAAIG,eAAeZ,IAAIW,WAAvB;;AAEA,YAAIJ,OAAO,yBAAUC,MAAMY,IAAN,EAAV,CAAX;;AAEA,YAAIX,QAAQC,SAASA,OAAOU,IAAP,EAAT,GAAyB,EAArC;;AAEA,YAAIT,cAAcC,eAAeA,aAAaQ,IAAb,EAAf,GAAqC,EAAvD;;AAEA,YAAI,CAACX,KAAL,EAAY;AACVA,kBAAQ,0BAAWF,IAAX,EAAiB,GAAjB,CAAR;AACD;AACDE,gBAASA,MAAMY,KAAN,CAAY,CAAZ,EAAc,CAAd,CAAD,CAAmBC,WAAnB,KAAmCb,MAAMY,KAAN,CAAY,CAAZ,CAA3C;;AAEA,YAAI,CAACV,WAAL,EAAkB;AAChBA,wBAAcF,SAASC,MAAvB;AACD;AACDC,sBAAeA,YAAYU,KAAZ,CAAkB,CAAlB,EAAoB,CAApB,CAAD,CAAyBC,WAAzB,KAAyCX,YAAYU,KAAZ,CAAkB,CAAlB,CAAvD;;AAEAH,eAAOV,KAAP,GAAeA,KAAf;AACAU,eAAOX,IAAP,GAAcA,IAAd;;AAEAW,eAAOR,MAAP,GAAgBA,MAAhB;AACAQ,eAAOT,KAAP,GAAeA,KAAf;;AAEAS,eAAON,YAAP,GAAsBA,YAAtB;AACAM,eAAOP,WAAP,GAAqBA,WAArB;;AAEA,aAAKL,IAAL,gBACKY,MADL;AAGD;AACF;;;4BAEO;AACN,aAAO,IAAI,KAAKK,WAAT,CAAqB,KAAKC,MAAL,EAArB,CAAP;AACD;;;wBAvFU;AACT,aAAO,KAAKlB,IAAL,GAAY,KAAKA,IAAL,CAAUC,IAAtB,GAA6BkB,SAApC;AACD;;;wBAEW;AACV,UAAIpB,QAAQ,KAAKC,IAAjB;AACA,aAAO,KAAKA,IAAL,GAAaD,MAAMI,KAAN,IAAeJ,MAAMK,MAAlC,GAA4Ce,SAAnD;AACD;;;wBAEiB;AAChB,UAAIpB,QAAQ,KAAKC,IAAjB;AACA,aAAO,KAAKA,IAAL,GAAaD,MAAMM,WAAN,IAAqBN,MAAMO,YAAxC,GAAwDa,SAA/D;AACD","file":"model/modelbase.js","sourcesContent":["import {ModelBaseSchema} from '../schema';\nimport {validator} from '../validator';\nimport camelcase from 'camelcase';\nimport decamelize from 'decamelize';\n\nexport class ModelBase {\n  constructor(obj) {\n    if (obj) {\n      this.updateWith(obj);\n    }\n  }\n\n  get name() {\n    return this.$obj ? this.$obj.name : undefined;\n  }\n\n  get title() {\n    let props = this.$obj;\n    return this.$obj ? (props.title || props.title_) : undefined;\n  }\n\n  get description() {\n    let props = this.$obj;\n    return this.$obj ? (props.description || props.description_) : undefined;\n  }\n\n  toString() {\n    return JSON.stringify(this.toObject());\n  }\n\n  toObject() {\n    let props = this.$obj;\n    return {\n      name: props.name || props.name_,\n      title: props.title || props.title_,\n      description: props.description || props.description_,\n    };\n  }\n\n  toJSON() {\n    var props = this.$obj;\n    return {\n      name: props.name_,\n      title: props.title_,\n      description: props.description_,\n    };\n  }\n\n  validateSchema(obj) {\n    const validation = validator.validate(obj, ModelBaseSchema);\n    if (!validation.valid) {\n      throw new Error(validation.toString());\n    }\n  }\n\n  updateWith(obj) {\n    if (obj) {\n\n      const result = this.$obj ? {...this.$obj} : {};\n\n      this.validateSchema(obj);\n\n      let name_ = obj.name;\n      let title_ = obj.title;\n      let description_ = obj.description;\n\n      let name = camelcase(name_.trim());\n\n      let title = title_ ? title_.trim() : '';\n\n      let description = description_ ? description_.trim() : '';\n\n      if (!title) {\n        title = decamelize(name, ' ');\n      }\n      title = (title.slice(0,1)).toUpperCase() + title.slice(1);\n\n      if (!description) {\n        description = title || title_;\n      }\n      description = (description.slice(0,1)).toUpperCase() + description.slice(1);\n\n      result.name_ = name_;\n      result.name = name;\n\n      result.title_ = title_;\n      result.title = title;\n\n      result.description_ = description_;\n      result.description = description;\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  clone() {\n    return new this.constructor(this.toJSON());\n  }\n}\n"],"sourceRoot":"/source/"}