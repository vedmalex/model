{"version":3,"sources":["model/field.js"],"names":[],"mappings":"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","file":"model/field.js","sourcesContent":["import {FieldBase} from './fieldbase';\nimport {validator} from '../validator';\nimport {Entity} from './entity';\nimport {HasOne} from './hasone';\nimport {HasMany} from './hasmany';\nimport {BelongsTo} from './belongsto';\nimport {BelongsToMany} from './belongstomany';\nimport {Ref} from './ref';\n\nimport {\n  FieldSchema,\n  HasOneSchema,\n  HasManySchema,\n  BelongsToSchema,\n  BelongsToManySchema,\n} from '../schema';\n\nfunction discoverFieldType(obj) {\n  if (validator.validate(obj, HasOneSchema).valid) {\n    return 'HasOne';\n  } else if (validator.validate(obj, HasManySchema).valid) {\n    return 'HasMany';\n  } else if (validator.validate(obj, BelongsToSchema).valid) {\n    return 'BelongsTo';\n  } else if (validator.validate(obj, BelongsToManySchema).valid) {\n    return 'BelongsToMany';\n  }\n};\n\nexport class Field extends FieldBase {\n\n  static compose(props, children) {\n    return {\n      ...props,\n      relation: children ? children[0] : undefined,\n    };\n  }\n\n  constructor(obj) {\n    super(obj);\n  }\n\n  get type() {\n    return this.$obj ? this.$obj.type : undefined;\n  }\n\n  get identity() {\n    return this.$obj ? this.$obj.identity : undefined;\n  }\n\n  set identity(value) {\n    if (value) {\n      this.$obj.idKey = new Ref(this.$obj.entity, this.$obj.name);\n    } else {\n      this.$obj.idKey = undefined;\n    }\n    this.$obj.identity = this.$obj.identity_ = value;\n  }\n\n  get required() {\n    return this.$obj ? this.$obj.required : undefined;\n  }\n\n  get idKey() {\n    return this.$obj ? this.$obj.idKey : undefined;\n  }\n\n  get relation() {\n    return this.$obj ? this.$obj.relation : undefined;\n  }\n\n  validateSchema(obj) {\n    const validation = validator.validate(obj, FieldSchema);\n    if (!validation.valid) {\n      throw new Error(validation.toString());\n    }\n  }\n\n  updateWith(obj) {\n    if (obj) {\n      super.updateWith(obj);\n      const result = this.$obj ? {...this.$obj} : {};\n\n      let type_ = obj.type;\n      let type = type_ || 'string';\n\n      let identity_ = obj.identity;\n      let identity = identity_ || false;\n\n      let required_ = obj.required;\n      let required = required || false;\n\n      result.type_ = type_;\n      result.type = type;\n\n      result.identity_ = identity_;\n      result.identity = identity;\n\n      if (result.identity) {\n        // это то как выглядит ключ для внешних ссылок\n        result.idKey = new Ref(result.entity, result.name);\n      }\n\n      result.required_ = required_;\n      result.required = identity_ || required_ || false;\n\n      if (obj.relation) {\n        let relation_ = obj.relation;\n        let relation;\n\n        switch (discoverFieldType(relation_)){\n          case 'HasOne':\n            relation = new HasOne({...relation_, entity: obj.entity});\n          break;\n          case 'HasMany':\n            relation = new HasMany({...relation_, entity: obj.entity });\n          break;\n          case 'BelongsTo':\n            relation = new BelongsTo({...relation_, entity: obj.entity});\n          break;\n          case 'BelongsToMany':\n            relation = new BelongsToMany({...relation_, entity: obj.entity});\n          break;\n        }\n\n        result.relation = relation;\n        delete result.type_;\n        delete result.type;\n      }\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  // it get fixed object\n  toObject() {\n    let props = this.$obj;\n    let res = super.toObject();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      type: props.type || props.type_,\n      identity: props.identity || props.identity_ ,\n      required: props.required || props.required_,\n      idKey: props.idKey ? props.idKey.toString() : undefined,\n      relation: props.relation ? props.relation.toObject() : undefined,\n    }));\n  }\n\n  // it get clean object with no default values\n  toJSON() {\n    let props = this.$obj;\n    let res = super.toJSON();\n    return JSON.parse(JSON.stringify({\n      ...res,\n      type: props.type_,\n      identity: props.identity_,\n      required: props.required_ ,\n      relation: props.relation ? props.relation.toJSON() : undefined,\n    }));\n  }\n}\n"],"sourceRoot":"/source/"}