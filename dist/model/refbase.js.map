{"version":3,"sources":["model/refbase.js"],"names":["RefBase","obj","updateWith","JSON","stringify","toObject","props","$obj","name","name_","validation","validate","valid","Error","toString","result","validateSchema","trim","constructor","toJSON","undefined"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAEaA,O,WAAAA,O;AACX,mBAAYC,GAAZ,EAAiB;AAAA;;AACf,QAAIA,GAAJ,EAAS;AACP,WAAKC,UAAL,CAAgBD,GAAhB;AACD;AACF;;;;+BAMU;AACT,aAAOE,KAAKC,SAAL,CAAe,KAAKC,QAAL,EAAf,CAAP;AACD;;;+BAEU;AACT,UAAIC,QAAQ,KAAKC,IAAjB;AACA,aAAO;AACLC,cAAMF,MAAME,IAAN,IAAcF,MAAMG;AADrB,OAAP;AAGD;;;6BAEQ;AACP,UAAIH,QAAQ,KAAKC,IAAjB;AACA,aAAO;AACLC,cAAMF,MAAMG;AADP,OAAP;AAGD;;;mCAEcR,G,EAAK;AAClB,UAAMS,aAAa,qBAAUC,QAAV,CAAmBV,GAAnB,wBAAnB;AACA,UAAI,CAACS,WAAWE,KAAhB,EAAuB;AACrB,cAAM,IAAIC,KAAJ,CAAUH,WAAWI,QAAX,EAAV,CAAN;AACD;AACF;;;+BAEUb,G,EAAK;AACd,UAAIA,GAAJ,EAAS;;AAEP,YAAMc,SAAS,KAAKR,IAAL,gBAAgB,KAAKA,IAArB,IAA6B,EAA5C;;AAEA,aAAKS,cAAL,CAAoBf,GAApB;;AAEA,YAAIQ,QAAQR,IAAIO,IAAhB;;AAEA,YAAIA,OAAOA,OAAO,yBAAUC,MAAMQ,IAAN,EAAV,CAAP,GAAiCT,IAA5C;;AAEAO,eAAON,KAAP,GAAeA,KAAf;AACAM,eAAOP,IAAP,GAAcA,IAAd;;AAEA,aAAKD,IAAL,gBACKQ,MADL;AAGD;AACF;;;4BAEO;AACN,aAAO,IAAI,KAAKG,WAAT,CAAqB,KAAKC,MAAL,EAArB,CAAP;AACD;;;wBAnDU;AACT,aAAO,KAAKZ,IAAL,GAAY,KAAKA,IAAL,CAAUC,IAAtB,GAA6BY,SAApC;AACD","file":"model/refbase.js","sourcesContent":["import {RefBaseSchema} from '../schema';\nimport {validator} from '../validator';\nimport camelcase from 'camelcase';\n\nexport class RefBase {\n  constructor(obj) {\n    if (obj) {\n      this.updateWith(obj);\n    }\n  }\n\n  get name() {\n    return this.$obj ? this.$obj.name : undefined;\n  }\n\n  toString() {\n    return JSON.stringify(this.toObject());\n  }\n\n  toObject() {\n    let props = this.$obj;\n    return {\n      name: props.name || props.name_,\n    };\n  }\n\n  toJSON() {\n    var props = this.$obj;\n    return {\n      name: props.name_,\n    };\n  }\n\n  validateSchema(obj) {\n    const validation = validator.validate(obj, RefBaseSchema);\n    if (!validation.valid) {\n      throw new Error(validation.toString());\n    }\n  }\n\n  updateWith(obj) {\n    if (obj) {\n\n      const result = this.$obj ? {...this.$obj} : {};\n\n      this.validateSchema(obj);\n\n      let name_ = obj.name;\n\n      let name = name ? camelcase(name_.trim()) : name;\n\n      result.name_ = name_;\n      result.name = name;\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  clone() {\n    return new this.constructor(this.toJSON());\n  }\n}\n"],"sourceRoot":"/source/"}