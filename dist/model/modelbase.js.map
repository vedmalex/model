{"version":3,"sources":["model/modelbase.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;IAKa;AACX,WADW,SACX,CAAY,GAAZ,EAAiB;0BADN,WACM;;AACf,QAAI,GAAJ,EAAS;AACP,WAAK,UAAL,CAAgB,GAAhB,EADO;KAAT;GADF;;eADW;;+BAqBA;AACT,aAAO,KAAK,SAAL,CAAe,KAAK,QAAL,EAAf,CAAP,CADS;;;;+BAIA;AACT,UAAI,QAAQ,KAAK,IAAL,CADH;AAET,aAAO;AACL,cAAM,MAAM,IAAN,IAAc,MAAM,KAAN;AACpB,eAAO,MAAM,KAAN,IAAe,MAAM,MAAN;AACtB,qBAAa,MAAM,WAAN,IAAqB,MAAM,YAAN;OAHpC,CAFS;;;;6BASF;AACP,UAAI,QAAQ,KAAK,IAAL,CADL;AAEP,aAAO;AACL,cAAM,MAAM,KAAN;AACN,eAAO,MAAM,MAAN;AACP,qBAAa,MAAM,YAAN;OAHf,CAFO;;;;mCASM,KAAK;AAClB,UAAM,aAAa,qBAAU,QAAV,CAAmB,GAAnB,0BAAb,CADY;AAElB,UAAI,CAAC,WAAW,KAAX,EAAkB;AACrB,cAAM,IAAI,KAAJ,CAAU,WAAW,QAAX,EAAV,CAAN,CADqB;OAAvB;;;;+BAKS,KAAK;AACd,UAAI,GAAJ,EAAS;;AAEP,YAAM,SAAS,KAAK,IAAL,gBAAgB,KAAK,IAAL,CAAhB,GAA6B,EAA7B,CAFR;;AAIP,aAAK,cAAL,CAAoB,GAApB,EAJO;;AAMP,YAAI,QAAQ,IAAI,IAAJ,CANL;AAOP,YAAI,SAAS,IAAI,KAAJ,CAPN;AAQP,YAAI,eAAe,IAAI,WAAJ,CARZ;;AAUP,YAAI,OAAO,yBAAU,MAAM,IAAN,EAAV,CAAP,CAVG;;AAYP,YAAI,QAAQ,SAAS,OAAO,IAAP,EAAT,GAAyB,EAAzB,CAZL;;AAcP,YAAI,cAAc,eAAe,aAAa,IAAb,EAAf,GAAqC,EAArC,CAdX;;AAgBP,YAAI,CAAC,KAAD,EAAQ;AACV,kBAAQ,0BAAW,IAAX,EAAiB,GAAjB,CAAR,CADU;SAAZ;AAGA,gBAAQ,KAAC,CAAM,KAAN,CAAY,CAAZ,EAAc,CAAd,CAAD,CAAmB,WAAnB,KAAmC,MAAM,KAAN,CAAY,CAAZ,CAAnC,CAnBD;;AAqBP,YAAI,CAAC,WAAD,EAAc;AAChB,wBAAc,SAAS,MAAT,CADE;SAAlB;AAGA,sBAAc,WAAC,CAAY,KAAZ,CAAkB,CAAlB,EAAoB,CAApB,CAAD,CAAyB,WAAzB,KAAyC,YAAY,KAAZ,CAAkB,CAAlB,CAAzC,CAxBP;;AA0BP,eAAO,KAAP,GAAe,KAAf,CA1BO;AA2BP,eAAO,IAAP,GAAc,IAAd,CA3BO;;AA6BP,eAAO,MAAP,GAAgB,MAAhB,CA7BO;AA8BP,eAAO,KAAP,GAAe,KAAf,CA9BO;;AAgCP,eAAO,YAAP,GAAsB,YAAtB,CAhCO;AAiCP,eAAO,WAAP,GAAqB,WAArB,CAjCO;;AAmCP,aAAK,IAAL,gBACK,OADL,CAnCO;OAAT;;;;4BAyCM;AACN,aAAO,IAAI,KAAK,WAAL,CAAiB,KAAK,MAAL,EAArB,CAAP,CADM;;;;wBArFG;AACT,aAAO,KAAK,IAAL,GAAY,KAAK,IAAL,CAAU,IAAV,GAAiB,SAA7B,CADE;;;;wBAIC;AACV,UAAI,QAAQ,KAAK,IAAL,CADF;AAEV,aAAO,KAAK,IAAL,GAAa,MAAM,KAAN,IAAe,MAAM,MAAN,GAAgB,SAA5C,CAFG;;;;wBAKM;AAChB,UAAI,QAAQ,KAAK,IAAL,CADI;AAEhB,aAAO,KAAK,IAAL,GAAa,MAAM,WAAN,IAAqB,MAAM,YAAN,GAAsB,SAAxD,CAFS;;;;SAhBP","file":"model/modelbase.js","sourcesContent":["import {ModelBaseSchema} from '../schema';\nimport {validator} from '../validator';\nimport camelcase from 'camelcase';\nimport decamelize from 'decamelize';\n\nexport class ModelBase {\n  constructor(obj) {\n    if (obj) {\n      this.updateWith(obj);\n    }\n  }\n\n  get name() {\n    return this.$obj ? this.$obj.name : undefined;\n  }\n\n  get title() {\n    let props = this.$obj;\n    return this.$obj ? (props.title || props.title_) : undefined;\n  }\n\n  get description() {\n    let props = this.$obj;\n    return this.$obj ? (props.description || props.description_) : undefined;\n  }\n\n  toString() {\n    return JSON.stringify(this.toObject());\n  }\n\n  toObject() {\n    let props = this.$obj;\n    return {\n      name: props.name || props.name_,\n      title: props.title || props.title_,\n      description: props.description || props.description_,\n    };\n  }\n\n  toJSON() {\n    var props = this.$obj;\n    return {\n      name: props.name_,\n      title: props.title_,\n      description: props.description_,\n    };\n  }\n\n  validateSchema(obj) {\n    const validation = validator.validate(obj, ModelBaseSchema);\n    if (!validation.valid) {\n      throw new Error(validation.toString());\n    }\n  }\n\n  updateWith(obj) {\n    if (obj) {\n\n      const result = this.$obj ? {...this.$obj} : {};\n\n      this.validateSchema(obj);\n\n      let name_ = obj.name;\n      let title_ = obj.title;\n      let description_ = obj.description;\n\n      let name = camelcase(name_.trim());\n\n      let title = title_ ? title_.trim() : '';\n\n      let description = description_ ? description_.trim() : '';\n\n      if (!title) {\n        title = decamelize(name, ' ');\n      }\n      title = (title.slice(0,1)).toUpperCase() + title.slice(1);\n\n      if (!description) {\n        description = title || title_;\n      }\n      description = (description.slice(0,1)).toUpperCase() + description.slice(1);\n\n      result.name_ = name_;\n      result.name = name;\n\n      result.title_ = title_;\n      result.title = title;\n\n      result.description_ = description_;\n      result.description = description;\n\n      this.$obj = {\n        ...result\n      };\n    }\n  }\n\n  clone() {\n    return new this.constructor(this.toJSON());\n  }\n}\n"],"sourceRoot":"/source/"}